<?xml version="1.0"?>
<robot name="neuronbot2" xmlns:xacro="http://ros.org/wiki/xacro">

  <material name="Grey">
    <color rgba="0.5 0.5 0.5 1"/>
  </material>

  <!-- Included URDF/XACRO Files -->
  <xacro:include filename="$(find neuronbot2_description)/urdf/decorations.urdf.xacro" />
  <xacro:include filename="$(find neuronbot2_description)/urdf/wheel.urdf.xacro" />

  <!-- <xacro:include filename="$(find neuronbot2_description)/urdf/accessories/intel_realsense.urdf.xacro"/> -->
  <!-- <xacro:include filename="$(find neuronbot2_description)/urdf/accessories/sick_lms1xx_mount.urdf.xacro"/> -->
  <xacro:include filename="$(find neuronbot2_description)/urdf/accessories/sensor_arch.urdf.xacro"/>

  <xacro:property name="M_PI" value="3.14159"/>
  <xacro:property name="husky_front_bumper_extend" value="$(optenv HUSKY_FRONT_BUMPER_EXTEND 0)" />
  <xacro:property name="husky_rear_bumper_extend" value="$(optenv HUSKY_REAR_BUMPER_EXTEND 0)" />
  <xacro:macro name="husky" params="prefix">

    <!-- Base Size -->
    <xacro:property name="base_x_size" value="0.98740000" />
    <xacro:property name="base_y_size" value="0.57090000" />
    <xacro:property name="base_z_size" value="0.24750000" />

    <!-- Wheel Mounting Positions -->
    <xacro:property name="wheelbase" value="0.5120" />
    <xacro:property name="track" value="0.5708" />
    <xacro:property name="wheel_vertical_offset" value="0.03282" />

    <!-- Wheel Properties -->
    <xacro:property name="wheel_length" value="0.1143" />
    <xacro:property name="wheel_radius" value="0.1651" />

    <!-- Base link is the center of the robot's bottom plate -->
    <link name="base_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://neuronbot2_description/meshes/neuronbot2/base_link.dae" />
        </geometry>
      </visual>
      <collision>
        <origin xyz="${( husky_front_bumper_extend - husky_rear_bumper_extend ) / 2.0} 0 ${base_z_size/4}" rpy="0 0 0" />
        <geometry>
          <box size="${ base_x_size + husky_front_bumper_extend + husky_rear_bumper_extend } ${base_y_size} ${base_z_size/2}"/>
        </geometry>
      </collision>
      <collision>
        <origin xyz="0 0 ${base_z_size*3/4-0.01}" rpy="0 0 0" />
        <geometry>
          <box size="${base_x_size*4/5} ${base_y_size} ${base_z_size/2-0.02}"/>
        </geometry>
      </collision>
    </link>

    <!-- Base footprint is on the ground under the robot -->
    <link name="base_footprint"/>

    <joint name="base_footprint_joint" type="fixed">
      <origin xyz="0 0 ${wheel_vertical_offset - wheel_radius}" rpy="0 0 0" />
      <parent link="base_footprint" />
      <child link="base_link" />
    </joint>

    <!-- Inertial link stores the robot's inertial information -->
    <link name="inertial_link">
      <inertial>
        <mass value="46.034" />
        <origin xyz="-0.00065 -0.085 0.062" />
        <inertia ixx="0.6022" ixy="-0.02364" ixz="-0.1197" iyy="1.7386" iyz="-0.001544" izz="2.0296" />
      </inertial>
    </link>

    <joint name="inertial_joint" type="fixed">
      <origin xyz="0 0 0" rpy="0 0 0" />
      <parent link="base_link" />
      <child link="inertial_link" />
    </joint>

    <!-- IMU Link-->
    <link name="imu_link"/>
    <joint name="imu_joint" type="fixed">
      <parent link="base_link"/>
      <child link="imu_link"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <!-- Gazebo IMU Sensor Plugin -->
    <gazebo reference="imu_link">
      <gravity>true</gravity>
      <sensor name="nb2_imu" type="imu">
        <always_on>true</always_on>
        <update_rate>200</update_rate>
        <visualize>true</visualize>
        <topic>__default_topic__</topic>
        <plugin filename="libgazebo_ros_imu_sensor.so" name="neuronbot2_imu">
          <ros>
            <remapping>~/out:=imu</remapping>
          </ros>
          <gaussianNoise>0.0</gaussianNoise>
          <xyzOffset>0 0 0</xyzOffset>
          <rpyOffset>0 0 0</rpyOffset>
          <!-- <frame_name>imu_link</frame_name> -->
          <initial_orientation_as_reference>false</initial_orientation_as_reference>
        </plugin>
        <pose>0 0 0 0 0 0</pose>
      </sensor>
    </gazebo>

    <!-- 2D LiDAR Link -->
    <link name="laser_frame">
      <inertial>
        <mass value="0.125"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
      </inertial>
      <!-- <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <mesh filename="package://neuronbot2_description/meshes/neuronbot2/laser_link.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="Grey"/>
      </visual> -->
      <!-- <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <mesh filename="package://neuronbot2_description/meshes/neuronbot2/laser_link.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision> -->
    </link>

    <!-- 2D LiDAR Joint (fixed to base_link) -->
    <joint name="laser_frame_joint" type="fixed">
      <parent link="base_link"/>
      <child link="laser_frame"/>
      <origin xyz="0 0 0.24" rpy="0 0 0"/>
    </joint>

    <!-- Gazebo LiDAR Sensor Plugin -->
    <gazebo reference="laser_frame">
      <sensor name="rp_lidar_a1" type="ray">
        <pose>0.0 0 0.02 0 0 0</pose>
        <update_rate>5.5</update_rate>
        <visualize>true</visualize>
        <ray>
          <scan>
            <horizontal>
              <samples>360</samples>
              <resolution>1.000000</resolution>
              <min_angle>-3.14</min_angle>
              <max_angle>3.14</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>0.2</min>
            <max>10.0</max>
            <resolution>0.05</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </ray>
        <plugin name="neuronbot2_laserscan" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <remapping>~/out:=scan</remapping>
          </ros>
          <output_type>sensor_msgs/LaserScan</output_type>
          <frame_name>laser_frame</frame_name>
        </plugin>
      </sensor>
    </gazebo>

  <!-- Planar Move 플러그인 -->
    <gazebo>
      <plugin filename="libgazebo_ros_planar_move.so" name="object_controller">
        <ros>
          <remapping>odom:=odom</remapping>
        </ros>
        <command_topic>cmd_vel</command_topic>
        <odometry_frame>odom</odometry_frame>
        <odometry_rate>20.0</odometry_rate>
        <robot_base_frame>base_footprint</robot_base_frame>
        <publish_odom>true</publish_odom>
        <publish_odom_tf>true</publish_odom_tf>
      </plugin>
    </gazebo>

    <!-- GPS Link-->
    <!-- Can be modified with environment variables in /etc/ros/setup.bash -->
    <link name="gps_link"/>
    <joint name="gps_joint" type="fixed">
      <origin xyz="$(optenv CPR_GPS_XYZ 0 0 0)" rpy="$(optenv CPR_GPS_RPY 0 0 0)" />
      <parent link="base_link" />
      <child link="gps_link" />
    </joint>

    <!-- Husky wheel macros -->
    <xacro:husky_wheel wheel_prefix="front_left">
      <origin xyz="${wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
    </xacro:husky_wheel>
    <xacro:husky_wheel wheel_prefix="front_right">
      <origin xyz="${wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
    </xacro:husky_wheel>
    <xacro:husky_wheel wheel_prefix="rear_left">
      <origin xyz="${-wheelbase/2} ${track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
    </xacro:husky_wheel>
    <xacro:husky_wheel wheel_prefix="rear_right">
      <origin xyz="${-wheelbase/2} ${-track/2} ${wheel_vertical_offset}" rpy="0 0 0" />
    </xacro:husky_wheel>

    <xacro:husky_decorate />
  </xacro:macro>
  <xacro:husky prefix=""/>
</robot>